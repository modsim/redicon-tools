#!/bin/bash
#
# bdbox-run (c) S. Kondrat (aka Valiska)  2013 run BD_BOX
# 
# This script is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# my dear self
myname=$(basename $0)
# others
bdbox=@BDFLEX_RUN@
molsys=@BCPT_MOLSYS@

# Default values
#nrun=1


#
# Functions
#
function usage()
{
  echo "Run BD_BOX simulations."
  echo "Usage: $1 options "
  echo "Where options are:"
  echo "  -d DIR                  working directory."
  echo "  -B BD_FLEX              use BD_FLEX binary."
  echo "  -o \"OPTS\"              add OPTS to existing BD_FLEX options (if any)."
  echo "  -O \"OPTS\"              pass OPTS to BD_FLEX. Options from "
  echo "			   control file (if any) will be overwritten."

  echo "  -i FILE                 input parameter file for all runs."
  echo "        rand_seed and *_filename options will be skipped."
  echo "  -c                      scan directory DIR for unfinished runs and continue."
  echo "  -s SCRIPT               run/queue each run via custom script."
  echo "        SCRIPT must accept options -d DIR -B FLEX -i INPUT -p NPROC -c COUNT -o OPTS"
  echo "        where COUNT says the continuation number, see '`basename @BDFLEX_RUN@` -h'"
  echo "        For an example see contrib/@BDFLEX_MSUB@"
  echo
  echo "  -b BASE                  custom base name for files (default input file)."

  echo "Molecular system options:"
  echo "  -H Hx,Hy,Hz             box size (in A)."
  echo "  -n N1,N2,..             particle's names."
  echo "  -r R1,R2,..             particle's radii (in A)."
  echo "  -N N1,N2,..             number of particles."
  echo "  -j E1,E2,..             LJ parameters (kcal/mol, default 1)."
  echo "  -q Q1,Q2,..             charges (in e; default 0)."
  echo "  -m M1,M2,..             masses (arbitrary, default 1)."
  echo "  -S R1,R2,..             Stockes radia (in A, default HS radia)."
  echo "  -T VAL,VAL,..           placement type(rand,cent,lat)."
  echo "  -t VAL                  number of tries for rand placement."
  echo "  -a                      separate STR file for each run (not implemented)."

  echo

  echo "Simulation options:"
  echo "  -R NUM                  number of runs."
  echo "  -p NPROC                use OpenMP with NPROX threads."
  echo "  -M NPROC,NCOL,NROW,NBLOCKS"
  echo "                          use MPI with NPROC processes, NCOL x NROW"
  echo "                          and NBLOCKS blocks."
  echo
  echo "  -v                      print version information and exit."
  echo "  -?                      print this help message and exit."

  echo
}

# generate a random seed number (from ttmp)
function random()
{    
	od -d /dev/urandom |\
		sed -e 's/^[0-9]* //' -e 's/ //g' |\
		while read L ; do echo -n $L ; done |\
			dd bs=1 count=${1:-10} 2>/dev/null
}

# Process BD_BOX PRM  file
# List of arguments:
#  $1 input file name
#  $1 output file name
function prm_strip ()
{
	local infile=$1
	local outfile=$2

	cat $infile | grep -v filename | grep -v rand_seed > $outfile
}

# Add file names and random seed
# Arguments:
# 	$1 Input file name
#	$2 STR file name
#	$3 basename for BD_BOX output files
function prm_prepare ()
{
	local infile=$1
	local strfile=$2
	local base=$3

	cat $infile

	echo "xyz_filename $base.xyz"
	echo "dcd_filename $base.dcd"
	echo "enr_filename $base.enr"
	echo "str_filename $strfile"
	echo "out_filename $base.out"
	echo "pqr_filename $base.pqr"
	echo "rst_filename $base.rst"

	echo rand_seed $(random 5)

	if test -n "$mpirow"; then
		echo "MPI_nprow  $mpirow"
	fi
	if test -n "$mpicol"; then
		echo "MPI_npcol  $mpicol"
	fi
	if test -n "$mpiblock"; then
		echo "MPI_block  $mpiblock"
	fi
}

# Save MPI data to file
function MPI_save_control ()
{
	local file=$1

	echo "mpiproc=$mpiproc" > $file
	echo "mpirow=$mpirow" >> $file
	echo "mpicol=$mpicol" >> $file
	echo "mpiblock=$mpiblock" >> $file
}

#
# Options
#
while getopts "d:B:o:O:i:cs:H:n:r:N:j:q:m:S:T:t:aR:p:M:b:v?:" Option
do
  case $Option in

    d  ) directory="$OPTARG"
         cmd="${cmd} -d $OPTARG";;

    B  ) bdbin="-B $OPTARG"
         cmd="${cmd} -B $OPTARG";;

    o  ) custom_bdflex_opts_add="$OPTARG"
         cmd="${cmd} -o \"$OPTARG\"";;

    O  ) custom_bdflex_opts="$OPTARG"
         cmd="${cmd} -O \"$OPTARG\"";;

    c  ) cont="yes";;

    s  ) script="$OPTARG"
	cmd="${cmd} -s $OPTARG";;

    i  ) input="$OPTARG"
         cmd="${cmd} -i $OPTARG";;

    H  ) molsys_opt="$molsys_opt -H$OPTARG"
         cmd="${cmd} -H $OPTARG";;

    n  ) molsys_opt="$molsys_opt -n$OPTARG"
         cmd="${cmd} -n $OPTARG";;

    r  ) molsys_opt="$molsys_opt -r$OPTARG"
         cmd="${cmd} -r $OPTARG";;

    j  ) molsys_opt="$molsys_opt -j$OPTARG"
         cmd="${cmd} -j $OPTARG";;

    q  ) molsys_opt="$molsys_opt -q$OPTARG"
         cmd="${cmd} -q $OPTARG";;

    m  ) molsys_opt="$molsys_opt -m$OPTARG"
         cmd="${cmd} -m $OPTARG";;

    S  ) molsys_opt="$molsys_opt -d$OPTARG"
         cmd="${cmd} -S $OPTARG";;

    T  ) molsys_opt="$molsys_opt -T$OPTARG"
         cmd="${cmd} -T $OPTARG";;

    t  ) molsys_opt="$molsys_opt -t$OPTARG"
         cmd="${cmd} -t $OPTARG";;

    N  ) molsys_opt="$molsys_opt -N$OPTARG"
         cmd="${cmd} -N $OPTARG";;

    R  ) nrun="$OPTARG"
         cmd="${cmd} -R $OPTARG";;

    p  ) nproc="-p $OPTARG"
         cmd="${cmd} -p $OPTARG";;

    M  ) OLD_IFS="$IFS";
	 IFS=","
	 MPI_list=( ${OPTARG} )
	 if test "${#MPI_list[@]}" != 4; then
	 	echo "$myname: -M required 4 comma-separated arguments. Use '$myname -h' for help."
		exit 1;
	 fi
         mpiproc="${MPI_list[0]}"
         mpicol="${MPI_list[1]}"
         mpirow="${MPI_list[2]}"
         mpiblock="${MPI_list[3]}"
         IFS="$OLD_IFS"
         cmd="${cmd} -M $OPTARG";;

    a  ) sepstr="yes"
         cmd="${cmd} -a";;

    b  ) custom_base="$OPTARG"
         cmd="${cmd} -b $OPTARG";;


    :  ) echo "$myname: option -$OPTARG requires an argument." >&2
         exit 1 ;;

    v  ) echo "$myname from @PACKAGE@ @VERSION@"
         exit 0;;

    
    '?'  |  h) usage ${myname}
	   exit $OPTERROR;;
   
     *  ) echo "${myname}: unimplemented option chosen.";;   # DEFAULT
  esac
done

shift $(($OPTIND - 1))


#
# Check options
#
# Working directory
if test -z "$directory" -a "x$cont" != "xyes"; then
	echo "$myname: no directory, use $myname -d DIR"
	exit 1;
fi
if test -d "$directory" -a "x$cont" != "xyes"; then
	echo "$myname: error: directory '$directory' exists"
	exit 1;
fi
mkdir -p $directory

# various admin data files
controldir=$directory/control
mkdir -p $controldir
custom_base_file=$controldir/"custom_base_name"
sepstr_file=$controldir/"sep_str_files"
runme_file=$controldir/"runner"
nrun_file=$controldir/"nruns"
nproc_file=$controldir/"openmp_cores"
mpi_file=$controldir/"mpi_data"
custom_bdflex_opts_file=$controldir/"custom_bdflex_opts"

# PRM and STR files (depends if continue or not)
if test "x$cont" == "xyes"; then

	prms=`ls $directory/ | grep .prm`
	nprm=0
	for f in $prms; do
		nprm=$[$nprm+1]
	done
	if test "$nprm" == "0"; then
		echo "$myname: error: no BD_BOX parameter file found in '$directory'"
		exit 1;
	elif test "$nprm" -gt "1"; then
		echo "$myname: error: more than one BD_BOX parameter file found, candidates are '$prms'"
		exit 1;
	fi
	#checks done, we have and only one .prm file
	input=$prms
	base=$(basename $input .prm)
	baseprm=$(readlink -f $directory/$input)
	echo "Using '$baseprm'"

	# Check if we use separate str files 
	# (and update the control file)
	if test -z "$sepstr"; then
		if test -f "$sepstr_file"; then
			sepstr=$(cat $sepstr_file)
		fi
	else
		echo $sepstr > $sepstr_file
	fi

	# now check for .str file
	strs=`ls $directory | grep .str.cmd`
	nstr=0
	for f in $nstr; do
		nstr=$[$nstr+1]
	done
	if test "$nstr" == "0"; then
		echo "$myname: error: no BD_BOX .str file found in '$directory'"
		exit 1;
	elif test "$nstr" -gt "1"; then
		echo "$myname: error: more than one BD_BOX .str file found, candidates are '$strs'"
		exit 1;
	fi
	# all fine, we have one str file
	strfile=$directory/$strs
	strcmd=$(readlink -f $strfile)
	if test "x$sepstr" == "xyes"; then
		if test ! -f "${strcmd}"; then
			echo "$myname: error: no '${strcmd}' do not know how to create the system."
			exit 1;
		fi
	fi
	echo "Using '$strfile'"

	# Check if we stored the custom base file name
	if test -z "$custom_base"; then
		if test -f "$custom_base_file"; then
			custom_base=$(cat "$custom_base_file")
		fi
	fi

	# Check if we stored the custom bdflex options
	if test -z "$custom_bdflex_opts"; then
		if test -f "$custom_bdflex_opts_file"; then
			custom_bdflex_opts=$(cat "$custom_bdflex_opts_file")
		fi
	fi
	custom_bdflex_opts="$custom_bdflex_opts $custom_bdflex_opts_add"

	# Check for number of runs
	if test -z "$nrun"; then
		if test -f "$nrun_file"; then
			nrun=$(cat "$nrun_file")
		fi
	fi

	# check ncores OpenMP/MPI
	if test -z "$nproc"; then
		if test -f "$nproc_file"; then
			nproc=$(cat "$nproc_file")
		fi
	fi

	if test -z "$mpiproc"; then
		if test -f "$mpi_file"; then
			. $mpi_file
			mpiopt="-M $mpiproc"
		fi
	fi
	if test -n "$nproc" -a -n "$mpiproc"; then
		echo "$myname: error: OpenMP with MPI is not implemented."
		echo "Use either -p or -M option (check control files)."
		exit 1;
	fi

else # We do not continue, check for prm and create str
	
	# Check in input exists
	if test -z "$input" -a "x$cont" != "xyes"; then
		echo "$myname: error: no input file, use $myname -i FILE"
		exit 1;
	fi
	if test ! -f "$input"; then
		echo "$myname: error: file '$input' does not exists"
		exit 1;
	fi
	# get base name for cmd, info str etc files
	base=$(basename $input .prm)

	# save command line
	echo $myname $cmd > $directory/$base.cmd

	# save 'stripped' PRM file
	prm_strip $input $directory/$base.prm
	baseprm=$(readlink -f $directory/$base.prm)
	strfile=$directory/$base.str

	# create STR file
	molsys_opt="$molsys_opt -R0,0,0 "
	strcmd=${strfile}.cmd
	echo $molsys $molsys_opt > $strcmd
	strcmd=$(readlink -f $strcmd)
	$molsys $molsys_opt -s $strfile
	if test $? != 0; then
		echo "$myname: `basename $molsys` failed, see error above"
		exit 1
	fi
	strfile=$(readlink -f $strfile)

	# Save (some) control files
	if test -n "$custom_base"; then
		echo $custom_base > $custom_base_file
	fi

	echo $sepstr > $sepstr_file

	if test -z "$nrun"; then
		nrun=1
	fi
	echo $nrun > $nrun_file

	# OpenMPI vs MPI
	if test -n "$nproc" -a -n "$mpiproc"; then
		echo "$myname: error: OpenMP with MPI is not implemented."
		echo "Use either -p or -M option."
		exit 1;
	fi

	# default
	if test -z "$mpiproc" -a -z "$nproc"; then
		nproc="-p 1"
	fi

	# Save OpenMP/MPI data to control file
	if test -n "$nproc"; then
		echo $nproc > $nproc_file
	elif test -n "$mpiproc"; then
		MPI_save_control $mpi_file
		mpiopt="-M $mpiproc"
	else
		echo "$myname: internal error: OpenMP or MPI? "
		exit 1
	fi
	# Check and save custom bdflex options
	if test -n "$custom_bdflex_opts" -o -n "$custom_bdflex_opts_add"; then
		custom_bdflex_opts="$custom_bdflex_opts $custom_bdflex_opts_add"
	fi
fi


# (Re)save the bd_flex options
echo $custom_bdflex_opts > $custom_bdflex_opts_file


# Check for script and set runme
if test -n "$script"; then
	if test ! -f "$script"; then
		echo "$myname: error: cannot find script '$script'"
		exit 1;
	fi
	script=`readlink -f $script`
	if test -x "$script"; then
		runme=$script
	else
		runme="bash $script"
	fi
else
	if test -f "$runme_file"; then
		runme=$(cat $runme_file)
	else
		runme=$bdbox
	fi
fi
echo $runme > $runme_file

# do the job
cd $directory
irun=0
while test $irun -lt $nrun; 
do
	idir=run_$irun
	mkdir -p $idir
	idir_opt="-d $(readlink -f $idir)"
	# local base name (for local run)
	if test -z "$custom_base"; then
		lbase=${base}_r$irun
	else
		lbase=${custom_base}_r$irun
	fi

	if test "x$sepstr" == "xyes"; then
		strfile=$idir/$lbase.str
		# create a file if it was not by the previous run
		if test ! -f "$strfile"; then
			molsysrun="`cat $strcmd` -s $strfile"
			echo $molsysrun
			$molsysrun
			if test $? != 0; then
				echo "$myname: `basename $molsys` failed, skipping run $irun."
				continue;
			fi
		fi
		strfile=$(readlink -f $strfile)
	fi

	# if no prm file from previous run, create it
	prmfile=$idir/$lbase.prm
	if test ! -f "$prmfile"; then
		prm_prepare $baseprm $strfile $lbase > $prmfile
	fi

	olddir=`$pwd` && cd $idir
	if test -f "@DONE@"; then
		echo "Run #$irun done, skipping..."
		cd ..
		irun=$[$irun+1] 
		continue;
	fi

	# Check the cont number 
	if test "x$cont" == "xyes"; then
		icont=0
		if test -f "@INTERRUPTED@.$icont"; then
			while true; do
				if test ! -f "@INTERRUPTED@.$icont"; then
					break
				fi
				icont=$[$icont+1]
			done
			cont_opt="-c $[$icont-1]"
		else
			cont_opt=
		fi
	fi

	if test -f "@ERROR@"; then
		echo
		echo "*** Run #$irun finished with error, restarting ***"
		cat @ERROR@ >> .errors
		rm @ERROR@
	fi

	# run the BD beast (runme is either a script or )
	echo
	echo "Starting/continuing run #$irun:"
	echo $runme $bdbin $idir_opt -i $(readlink -f $lbase.prm) $nproc $mpiopt -o \"$custom_bdflex_opts\" $cont_opt >> $lbase.cmd
	$runme $bdbin $idir_opt -i $(readlink -f $lbase.prm) $nproc $mpiopt -o "$custom_bdflex_opts" $cont_opt
	echo "Run #$irun done/queued!"

	# FIXME: for running in parallel save pid number to know whome to kill
	#echo $! > $base.pid
	
	# FIXME: full path and cd olddir?
	cd ../
	irun=$[$irun+1]
done

exit 0;

