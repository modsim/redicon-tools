#!/bin/bash
#
# molb2msd (c) S. Kondrat (aka Valiska)  2015 calculate MSD from molb of BD_BOX
# 
# This script is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# my dear self
myname=$(basename $0)
# others
average=@BCPT_AVERAGE@
#average=average-me.py
molb2dat=@MOLB2DAT@

#
# Functions
#
function usage()
{
  echo "Calculate MSD from BD_BOX molb binary files"
  echo "Usage: $1 options "
  echo "Where options are:"
  echo "  -i FILE1,FILE2,...   molb files for the same system (different simulations)"
  echo "  -o FILE              output base file name"
  echo "  -m M0,M1,Ms          molecules from M0 to M1 skiping Ms"
  echo "  -r Hx,Hy,Hz          initial molecule position (from mstr file)."
  echo "  -H Hx,Hy,Hz          periodic box size (default no box = 0,0,0)"
  echo "  -w VAL               time window for averaging."
  echo
  echo "  -v                   print version information and exit."
  echo "  -?                   print this help message and exit."

  echo
}
#
# Options
#
while getopts "i:o:m:w:H:r:vh?:" Option
do
  case $Option in

    i  ) OLD_IFS="$IFS";
	 IFS=","
	 molbfiles=( ${OPTARG} )
         IFS="$OLD_IFS"
         cmd="${cmd} -i $OPTARG";;

    o  ) obase="$OPTARG"
         cmd="${cmd} -o $OPTARG";;

    m  ) molb2dat_opts="$molb2dat_opts -m$OPTARG"
	 OLD_IFS="$IFS";
	 IFS=","
	 nmols=( ${OPTARG} )
         IFS="$OLD_IFS"

         cmd="${cmd} -m $OPTARG";;

    r  ) molb2dat_opts="$molb2dat_opts -r$OPTARG"
         cmd="${cmd} -r $OPTARG";;

    H  ) molb2dat_opts="$molb2dat_opts -H$OPTARG"
         cmd="${cmd} -H $OPTARG";;

    w  ) window=" -w$OPTARG"
         cmd="${cmd} -w $OPTARG";;

    :  ) echo "$myname: option -$OPTARG requires an argument." >&2
         exit 1 ;;

    v  ) echo "$myname from @PACKAGE@ @VERSION@"
  	 exit 0;;

    '?'  |  h) usage ${myname}
	   exit $OPTERROR;;
   
     *  ) echo "${myname}: unimplemented option chosen.";;   # DEFAULT
  esac
done

shift $(($OPTIND - 1))


#
# Check options
#
if test -z "${molbfiles[*]}"; then
	echo "$myname: error; no molb files, use $myname -i FILE,FILE,..."
	exit 1;
fi
if test -z "$obase"; then
	echo "$myname: error: no output base file name, use $myname -o BASE"
	exit 1;
fi

for f in ${molbfiles[*]}; do
	datdir=$(basename $f .molb)
	mkdir -p $datdir
	$molb2dat -i $f $molb2dat_opts -o $datdir/$obase
	n=${nmols[0]}
	while test "$n" -le "${nmols[1]}"; do
		ff="$datdir/$obase.mol${n}.dat"
		echo files: $ff
		if test -f "$ff"; then
			files="$files $ff";
		fi
		n=$[$n+${nmols[2]}]
	done
done

files_file=`mktemp $myname-XXXXXX`
if test -n "$files_file"; then
    echo $files > $files_file
    average_files=" -F $files_file"
else
    echo "$myname: cannot create a temporary file, I am sorry to give up..."
    exit 1
fi

echo
echo "Avereging:"
echo $average $average_files -k 0,5 $window
$average $average_files -k 0,5 $window > $obase.dat
echo "Avereging done."

if test -f "$files_file"; then
	rm $files_file
fi

exit 0;

