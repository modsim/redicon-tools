#!/bin/bash
#
# bd_flex-msub (c) S. Kondrat (aka Valiska)  2013  custom bd_flex script 
# for judge cluster @ fz-juelich for job submision with MOAB
# 
# This script is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
#
# 
#msub="/opt/moab/bin/msub -l nodes=1:ppn=10:gpus=2 -V -S /bin/bash"
#msub="ssh judge /opt/moab/bin/msub -l nodes=1:ppn=10:gpus=2 -V -S /bin/bash"
msub="bash"

# my dear self
myname=$(basename $0)
# my full path
myself=$(readlink -f $0)
# others
bdflex=@BDFLEX_RUN@

#
# Functions
#
function usage()
{
  echo "Echo bd_flex-run (for testing)."
  echo "Usage: $1 options "
  echo "Where options are:"
  echo "  -d DIR                  run in directory DIR (optional)."
  echo "  -B BD_FLEX              use BD_FLEX binary."
  echo "  -i FILE                 input parameter file."
  echo "  -c COUNT                continue (count to keep track on reruns)."
  echo "  -p NUM                  number of processes (for OpenMP)."
  echo "  -M PROC,COL,ROW,BLOCK   number of processes, collons, rows and blocks for MPI."

  echo
  echo "  -v                      print version information and exit."
  echo "  -?                      print this help message and exit."

  echo
}

#
# Options
#
while getopts "d:B:i:p:M:c:v?:" Option
do
  case $Option in

    d  ) directory="$OPTARG"
         cmd="${cmd} -d $OPTARG";;

    B  ) bdflex="$OPTARG"
         cmd="${cmd} -B $OPTARG";;

    i  ) input="$OPTARG"
         cmd="${cmd} -i $OPTARG";;

    p  ) nproc="$OPTARG"
         cmd="${cmd} -p $OPTARG";;

    M  ) mpiopt="$OPTARG"
         cmd="${cmd} -M $OPTARG";;

    c  ) count="$OPTARG"
         cmd="${cmd} -c $OPTARG";;

    r  ) script="$OPTARG"
         cmd="${cmd} -k $OPTARG";;

    :  ) echo "$myname: option -$OPTARG requires an argument." >&2
         exit 1 ;;

    v  ) echo "$myname from @PACKAGE@ @VERSION@"
         exit 0;;

    
    '?'  |  h) usage ${myname}
	   exit $OPTERROR;;
   
     *  ) echo "${myname}: unimplemented option chosen.";;   # DEFAULT
  esac
done

shift $(($OPTIND - 1))

# Check if already queued
if test -f "$directory/@QUEUE@"; then
	echo "$myname: error: job is queued already; if this is not the case, remove '$directory/@QUEUE@' and run again."
	exit 1;
fi

# Check if there is msub
# There is a submiter on a master but no submiter on nodes
# just set it by hands (see file's top)
#msub=`which msub`
#if test -n "$msub"; then
#	msub="$msub -l nodes=1:ppn=10:gpus=2 -V -S /bin/bash"
#else
#	msub="bash"
#fi

# Check input file and create qsub file
if test -z "$input"; then
	echo "$myname: error: no input file, use -i FILE"
	exit 1;
fi
if test ! -f "$input"; then
	echo "$myname: error: no input file '$input'"
	exit 1;
fi

# Get the qsub file name
qsubfile="$directory/`basename $input .prm`.qsub"

if test -f "$qsubfile"; then
	count=1
	while true; do
		if test ! -f "$qsubfile.$count"; then
			qsubfile=$qsubfile.$count
			break
		fi
		count=$[$count+1]
	done
fi
echo $bdflex $cmd -r $myself > $qsubfile

# add err/out files
if test "$msub" != "bash"; then
	msub="$msub -e ${qsubfile}.err -o ${qsubfile}.out "
fi

# Write queue info and submit
echo "Queued on `date` by $myname @VERSION@" > $directory/@QUEUE@
echo "qsub command: $msub" >> $directory/@QUEUE@
echo "qsub file: $qsubfile" >> $directory/@QUEUE@
echo >> $directory/@QUEUE@

# Run/submit a job
$msub $qsubfile
exit 0;

